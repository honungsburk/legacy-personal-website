<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>frankhampusweslien - All content</title>
    <link href="http://frankhampusweslien.com/atom.xml" rel="self" />
    <link href="http://frankhampusweslien.com" />
    <id>http://frankhampusweslien.com/atom.xml</id>
    <author>
        <name>Frank Hampus Weslien</name>
        <email>frankhampusweslien@gmail.com</email>
    </author>
    <updated>2019-05-01T00:00:00Z</updated>
    <entry>
    <title>Hakyll Reviewed</title>
    <link href="http://frankhampusweslien.com/content/blog/2019-05-01-Hakyll-Reviewed.html" />
    <id>http://frankhampusweslien.com/content/blog/2019-05-01-Hakyll-Reviewed.html</id>
    <published>2019-05-01T00:00:00Z</published>
    <updated>2019-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>During Easter I finally found some time to finish my website: fix the styling, html templates, and all the rest. But during my “involuntary” break of little more over a year I found myself scratching me head looking through my Jekyll project. <em>Oh my…</em> I thought to myself. And seeing as I’ve been toying around with Haskell I promptly decided to rebuild the entire thing using Hakyll instead. Brilliant.</p>
<!--more-->
<p>Now, Hakyll takes a different approach to static site generation compared to something like Jekyll. Instead of being a ready made tool it’s a library that lets you build own generator. Of course, that means that it is a bit more complex. Trading convince for power.</p>
<p>Like Jekyll you have templates, CSS, and your posts or other content you wish to display. Just like normal. But you also have code to define the behavior of your static site generator. You have a main function like so</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb1-2" title="2">main <span class="fu">=</span> hakyll <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-3" title="3">    cssRules</a>
<a class="sourceLine" id="cb1-4" title="4">    tagPagesRules</a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="fu">...</span></a></code></pre></div>
<p>after which you define a set of rules. Rules can be arbitrarily complex but are often very simple, and thanks to Haskell being so terse you often don’t need many lines of code. Here are two examples.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="co">-- | A simple rule that copies all .css files in </span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="co">--   the css folder and compress them</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="ot">cssRules ::</span> <span class="dt">Rules</span> ()</a>
<a class="sourceLine" id="cb2-5" title="5">cssRules <span class="fu">=</span> match <span class="st">&quot;css/*.css&quot;</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-6" title="6">    route   idRoute</a>
<a class="sourceLine" id="cb2-7" title="7">    compile compressCssCompiler</a>
<a class="sourceLine" id="cb2-8" title="8"></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="co">-- | And here an example of a more complex rule </span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="co">--   that generates tag pages.</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="ot">tagPagesRules ::</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Rules</span> ()</a>
<a class="sourceLine" id="cb2-12" title="12">tagPagesRules tags <span class="fu">=</span> tagsRules tags <span class="fu">$</span> \tag <span class="kw">pattern</span> <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-13" title="13">    <span class="kw">let</span> title <span class="fu">=</span> <span class="st">&quot;\&quot;&quot;</span> <span class="fu">++</span> tag <span class="fu">++</span> <span class="st">&quot;\&quot;&quot;</span></a>
<a class="sourceLine" id="cb2-14" title="14">    route idRoute</a>
<a class="sourceLine" id="cb2-15" title="15">    compile <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-16" title="16">        content <span class="ot">&lt;-</span> recentFirst <span class="fu">=&lt;&lt;</span> loadAll <span class="kw">pattern</span></a>
<a class="sourceLine" id="cb2-17" title="17">        <span class="kw">let</span> ctx <span class="fu">=</span> constField <span class="st">&quot;title&quot;</span> title</a>
<a class="sourceLine" id="cb2-18" title="18">                <span class="fu">&lt;&gt;</span> tagPageCtx tags content</a>
<a class="sourceLine" id="cb2-19" title="19">        item <span class="ot">&lt;-</span> makeItem <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb2-20" title="20">        loadAndApplyTemplates item ctx</a>
<a class="sourceLine" id="cb2-21" title="21">            [ <span class="st">&quot;templates/tagPage.html&quot;</span></a>
<a class="sourceLine" id="cb2-22" title="22">            , <span class="st">&quot;templates/default.html&quot;</span></a>
<a class="sourceLine" id="cb2-23" title="23">            ]</a>
<a class="sourceLine" id="cb2-24" title="24"></a>
<a class="sourceLine" id="cb2-25" title="25"><span class="ot">tagPageCtx ::</span> <span class="dt">Tags</span></a>
<a class="sourceLine" id="cb2-26" title="26">           <span class="ot">-&gt;</span> [<span class="dt">Item</span> <span class="dt">String</span>] <span class="co">-- ^ content sharing the same tag</span></a>
<a class="sourceLine" id="cb2-27" title="27">           <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb2-28" title="28">tagPagesCtx <span class="fu">=</span> <span class="fu">...</span></a></code></pre></div>
<p>That said, if you want a highly customized website you might have to write a bit more. In fact this <a href="http://frankhampusweslien.com">website</a> is 322 loc. Which, when I come to think about it, might be a few more lines then I would like. Luckily however the code you write when defining your rules usually isn’t to complex and having such direct access to the internals lends Hakyll to very easily be modified. Adding an extension is trivial. One example would be supporting Sass, seeing as Hakyll itself doesn’t ship with it. On Hackage we can find the convenient hakyll-sass library that defines functions to do what we want.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">import</span> <span class="dt">Hakyll.Web.Sass</span> (sassCompiler)</a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="ot">scssRules ::</span> <span class="dt">Rules</span> ()</a>
<a class="sourceLine" id="cb3-4" title="4">scssRules <span class="fu">=</span> match <span class="st">&quot;css/*.scss&quot;</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-5" title="5">        route <span class="fu">$</span> setExtension <span class="st">&quot;css&quot;</span></a>
<a class="sourceLine" id="cb3-6" title="6">        <span class="kw">let</span> compressCssItem <span class="fu">=</span> <span class="fu">fmap</span> compressCss</a>
<a class="sourceLine" id="cb3-7" title="7">        compile (compressCssItem <span class="fu">&lt;$&gt;</span> sassCompiler)</a></code></pre></div>
<p>And we are done.</p>
<p>However, for all its brilliance Hakyll do fall short in one area: documentation. Simply put, there isn’t that much of it. There is enough but sometimes you stumble upon a piece of undocumented code leaving you to scratch your head. The function bellow was used to generate the html of the tags scattered around the website.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="ot">tagsFieldWith ::</span> (<span class="dt">Identifier</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> [<span class="dt">String</span>])</a>
<a class="sourceLine" id="cb4-2" title="2">              <span class="ot">-&gt;</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Maybe</span> <span class="dt">FilePath</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Html</span>) </a>
<a class="sourceLine" id="cb4-3" title="3">              <span class="ot">-&gt;</span> ([<span class="dt">Html</span>] <span class="ot">-&gt;</span> <span class="dt">Html</span>) </a>
<a class="sourceLine" id="cb4-4" title="4">              <span class="ot">-&gt;</span> <span class="dt">String</span> </a>
<a class="sourceLine" id="cb4-5" title="5">              <span class="ot">-&gt;</span> <span class="dt">Tags</span></a>
<a class="sourceLine" id="cb4-6" title="6">              <span class="ot">-&gt;</span> <span class="dt">Context</span> a</a></code></pre></div>
<p>After staring at the types a bit, and finally having the compiler cease its complaining I came up with this.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="ot">tagsFieldWith ::</span> (<span class="dt">Identifier</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> [<span class="dt">String</span>])            </a>
<a class="sourceLine" id="cb5-2" title="2">              <span class="co">-- ^ Function to get the tags</span></a>
<a class="sourceLine" id="cb5-3" title="3">              <span class="ot">-&gt;</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Maybe</span> <span class="dt">FilePath</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Html</span>)   </a>
<a class="sourceLine" id="cb5-4" title="4">              <span class="co">-- ^ Function to generate the html of one tag</span></a>
<a class="sourceLine" id="cb5-5" title="5">              <span class="ot">-&gt;</span> ([<span class="dt">Html</span>] <span class="ot">-&gt;</span> <span class="dt">Html</span>)                             </a>
<a class="sourceLine" id="cb5-6" title="6">              <span class="co">-- ^ Function to concatenate tags to a larger html</span></a>
<a class="sourceLine" id="cb5-7" title="7">              <span class="ot">-&gt;</span> <span class="dt">String</span>                                       </a>
<a class="sourceLine" id="cb5-8" title="8">              <span class="co">-- ^ Name of the field </span></a>
<a class="sourceLine" id="cb5-9" title="9">              <span class="ot">-&gt;</span> <span class="dt">Tags</span></a>
<a class="sourceLine" id="cb5-10" title="10">              <span class="ot">-&gt;</span> <span class="dt">Context</span> a</a></code></pre></div>
<p>So thankfully Haskell’s expressive type system comes to the rescue. But documentation is invaluable and you should expect to have some of your time wasted when it’s missing.</p>
<p>All in all I found Hakyll to be a delightful tool to build my website and if your a Haskell enthusiast I’d recommend it whole heartedly.</p>]]></summary>
</entry>
<entry>
    <title>The Crimson King</title>
    <link href="http://frankhampusweslien.com/indexProjects.html" />
    <id>http://frankhampusweslien.com/indexProjects.html</id>
    <published>2019-04-28T00:00:00Z</published>
    <updated>2019-04-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The Crimson King is a chapbook containing 12 poems. <!--more--></p>]]></summary>
</entry>
<entry>
    <title>This website</title>
    <link href="http://frankhampusweslien.com/indexProjects.html" />
    <id>http://frankhampusweslien.com/indexProjects.html</id>
    <published>2019-04-21T00:00:00Z</published>
    <updated>2019-04-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This site was built using Hakyll, a haskell static site generator, and is my own personal website where I write blog posts and show of things that interests me. You’ll find a link to the public github repo down bellow. Feel free to use it in any way you see fit.</p>
<p>p.s. A cheap way to host your own site is by using github pages. You can read more <a href="">here</a>. <!--more--></p>]]></summary>
</entry>
<entry>
    <title>Weasel</title>
    <link href="http://frankhampusweslien.com/indexProjects.html" />
    <id>http://frankhampusweslien.com/indexProjects.html</id>
    <published>2018-08-04T00:00:00Z</published>
    <updated>2018-08-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Weasel is a command line tool to analyse poetry/rap. It will, when finished, be able to tag what words in a text rhyme with one another, and in what way they do. Supporting all forms of phonetic word play, from slant rhymes to perfect rhymes, beautifully visualized as well as supporting multiple formats including JSON. <!--more--></p>]]></summary>
</entry>
<entry>
    <title>Höstblad</title>
    <link href="http://frankhampusweslien.com/content/writing/poetry/2018-03-06-H%C3%B6stblad.html" />
    <id>http://frankhampusweslien.com/content/writing/poetry/2018-03-06-H%C3%B6stblad.html</id>
    <published>2018-03-06T00:00:00Z</published>
    <updated>2018-03-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Är inte höstens blad de allra vackrast?<br />
Ett dramatiskt slut på en mättad grönska,<br />
en kort tids färg, ett sista rassel,<br />
tills varje blad somnat under evig tystnad.<br />
Vad gömmer sig där bakom de tunna liven?<br />
Vad håller allting fast när vinden viner?<br />
Att så späda ting vägrar tyngas ner,<br />
tills de rycks i en av höstens pustar,<br />
å aldrig syns nå’ mer.</p>]]></summary>
</entry>
<entry>
    <title>Birds of sorrow</title>
    <link href="http://frankhampusweslien.com/content/writing/poetry/2018-03-06-Birds-of-sorrow.html" />
    <id>http://frankhampusweslien.com/content/writing/poetry/2018-03-06-Birds-of-sorrow.html</id>
    <published>2018-03-06T00:00:00Z</published>
    <updated>2018-03-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>As early dawn spreads her palm and folly takes its grasp,<br />
Heed her call and take my arm for sorrow will not pass.<br />
The heart will beat in steady streams of tearful memories.<br />
How blissful nights of innocence turn to haunting dreams.<br />
Every sight and every pain we grieve but dare not paint;<br />
So nigh and so sly is the truth we dare not face.<br />
Instead we’ll hide in between the wings of liberty,<br />
And among its feathers find our peace in blissful misery.</p>]]></summary>
</entry>
<entry>
    <title>S-Class</title>
    <link href="http://frankhampusweslien.com/content/writing/poetry/2018-02-01-S-Class.html" />
    <id>http://frankhampusweslien.com/content/writing/poetry/2018-02-01-S-Class.html</id>
    <published>2018-02-01T00:00:00Z</published>
    <updated>2018-02-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>He who squared the circle,<br />
legend among his peers.<br />
The retrofitted tale,<br />
of how a man outgrew his fears.<br />
Carrying the weight of future,<br />
haunted by its ghost.<br />
Will this S-class hero<br />
ever walk the immortal’s soil?</p>]]></summary>
</entry>
<entry>
    <title>Purple Dreams</title>
    <link href="http://frankhampusweslien.com/content/writing/poetry/2018-01-22-Purple-Dreams.html" />
    <id>http://frankhampusweslien.com/content/writing/poetry/2018-01-22-Purple-Dreams.html</id>
    <published>2018-01-22T00:00:00Z</published>
    <updated>2018-01-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>On beaches of ivory, washed by the purple sea,<br />
In dreamy translucence, waving the last ship set free.<br />
Oh how birds sing and the wind whistles,<br />
And how far-off ships gleam like alien crystals.<br />
The mad passions ebb - and flow, raging,<br />
sacred is the dawn still awaiting.</p>]]></summary>
</entry>

</feed>
